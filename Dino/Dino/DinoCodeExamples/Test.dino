//x = 12 == 13 
//x = 3 * 12  

//y = x++ * &z
//auto x = (int a) int[1]: return 10
/*int[1] a(int[] a, int8@@ y) {
    return 10
} */

//auto x = new int[A.Size(b)]

// type A is B {
//     int a
//     int b
//     (int, int) Foo(int a):
//         return this.a, a * b

//     (int, int) Bar {
//         get: return a, b
//         set: a, b = value
//     }
// }

/*interface Comparable {
    bool Equals(Comparable other)
}

interface Shape is Comparable {
    int Area
    void Enlarge(int n)
}

type Rectangle is Shape {
    int height
    int width

    void Enlarge(int n) {
        height += n
        width += n
        //return
    }

    int Area {
        get: return height * width
    }

    bool Equals(Comparable other) {
        return other is Rectangle and Rectangle(other).Area == Area
    }
}

void Main() {
    auto shapes = new Shape[10]
    //for int i = 0 | i < shapes.Length - 1 | i++:
        if shapes[i] == shapes[i + 1]:
            Print(i, "and", i + 1, "are equal!")
}*/

//int[][] a = int[1][2]

//int[,] b = int[1, 2]

/*auto a = [
    [a, b],
    [b, c],
]*/


// if a is true {
//     b()
//     a = []
//     b = [
//         "WOW", 
//         name, 
//         b,
//     ]
    
// }


void Main () {
    Print("Enter Command Buffer: ")
    string buf = ReadLine()

    int[] memory = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    int memPtr = 0
    Console.ForegroundColor = ConsoleColor.Blue

    for int i = 0 | i < buf.Length | i++ {
        if buf[i] == ',' {
            Console.Clear()
            Print("Provide input: ")
            string input = Console.ReadLine()
            memory[memPtr] = System.Convert.ToInt32 (input)
        }
        else if buf[i] == '.':
            Print(memory[memPtr])
        else if buf[i] == '<':
            memPtr--
        else if buf[i] == '>':
            memPtr++
        else if buf[i] == '+':
            memory[memPtr]++
        else if buf[i] == '-':
            memory[memPtr]--
        else if buf[i] == '[':
            if memory[memPtr] == 0 {
                int skip = 0
                int ptr = i + 1
                while buf[ptr] != ']' or skip > 0 {
                    if buf [ptr] == '[':
                        skip += 1
                    else if buf [ptr] == ']':
                        skip -= 1
                    ptr += 1
                    i = ptr
                }
            }
        else if buf [i] == ']' { 
            if (memory [memPtr] != 0) {
                int skip = 0
                int ptr = i - 1
                while buf[ptr] != '[' or skip > 0 {
                    if buf [ptr] == ']':
                        skip++
                    else if buf [ptr] == '[':
                        skip--
                    ptr--
                    i = ptr
                }
            }
        }

        Console.Clear()

        for int j = 0 | j < memory.Length | j++ {
            if j == memPtr:
                Console.ForegroundColor = ConsoleColor.Red
            else: Console.ForegroundColor = ConsoleColor.Blue
            Print(memory [j] + " ")
        }
        Print("\n")

        for int j = 0 | j < buf.Length | j++ {
            if j == i:
                Console.ForegroundColor = ConsoleColor.Red
            else: Console.ForegroundColor = ConsoleColor.Blue
            Print(buf[j] + " ");
        }

        System.Threading.Thread.Sleep(1000);
    }
    Console.ReadLine();
}