digraph G {
0 [label="<Block>"];0->1;0->3;0->5;0->27;0->39;0->41;0->45;0->47;0->50;0->55;0->58;
1 [label="<VariableDeclaration>\nint i"];
3 [label="<BinaryOperator>\n="];3->2;3->4;
2 [label="<Variable>\ni"];
4 [label="<IntegerLiteral>\n2"];
5 [label="<IfThenElse>"];5->11;5->15;5->21;
11 [label="<BinaryOperator>\n&&"];11->9;11->13;
9 [label="<BinaryOperator>\n=="];9->7;9->10;
7 [label="<BinaryOperator>\n*"];7->6;7->8;
6 [label="<Variable>\ni"];
8 [label="<IntegerLiteral>\n2"];
10 [label="<IntegerLiteral>\n4"];
13 [label="<BinaryOperator>\n<"];13->12;13->14;
12 [label="<Variable>\ni"];
14 [label="<IntegerLiteral>\n1"];
15 [label="<Block>"];15->17;
17 [label="<FunctionCall>\nprint"];17->19;
19 [label="<BinaryOperator>\n*"];19->18;19->20;
18 [label="<Variable>\ni"];
20 [label="<IntegerLiteral>\n3"];
21 [label="<Block>"];21->23;
23 [label="<FunctionCall>\nprint"];23->25;
25 [label="<BinaryOperator>\n*"];25->24;25->26;
24 [label="<IntegerLiteral>\n4"];
26 [label="<IntegerLiteral>\n2"];
27 [label="<While>"];27->29;27->31;
29 [label="<BinaryOperator>\n<"];29->28;29->30;
28 [label="<Variable>\ni"];
30 [label="<IntegerLiteral>\n12"];
31 [label="<Block>"];31->33;31->37;
33 [label="<FunctionCall>\nprint"];33->35;
35 [label="<BinaryOperator>\n-"];35->34;35->36;
34 [label="<Variable>\ni"];
36 [label="<IntegerLiteral>\n2"];
37 [label="<UnaryOperator>\n++"];37->38;
38 [label="<Variable>\ni"];
39 [label="<VariableDeclaration>\nfrac x"];
41 [label="<BinaryOperator>\n="];41->40;41->43;
40 [label="<Variable>\nx"];
43 [label="<BinaryOperator>\n/"];43->42;43->44;
42 [label="<IntegerLiteral>\n1.400000"];
44 [label="<IntegerLiteral>\n2.100000"];
45 [label="<VariableDeclaration>\nstring z"];
47 [label="<BinaryOperator>\n="];47->46;47->48;
46 [label="<Variable>\nz"];
48 [label="<IntegerLiteral>\n"abc""];
50 [label="<BinaryOperator>\n="];50->49;50->52;
49 [label="<Variable>\nz"];
52 [label="<BinaryOperator>\n+"];52->51;52->53;
51 [label="<Variable>\nz"];
53 [label="<Variable>\nz"];
55 [label="<FunctionCall>\nprint"];55->56;
56 [label="<Variable>\nz"];
58 [label="<FunctionCall>\nprint"];58->59;58->60;58->62;
59 [label="<Variable>\nx"];
60 [label="<IntegerLiteral>\n12"];
62 [label="<BinaryOperator>\n+"];62->61;62->63;
61 [label="<IntegerLiteral>\n"hello""];
63 [label="<IntegerLiteral>\n" world""];
}