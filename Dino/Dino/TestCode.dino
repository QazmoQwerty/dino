int Fib(int n) {
	if n <= 1:
		return n
	return Fib(n-1) + Fib(n-2) 
}

for int i = 0 | i < 14 | ++i:
	Print(Fib(i))

/*type Rectangle {
	int h
	int w

	int Area():
		return this.h * this.w
	
	void Show():
		Print("height:", h, "width:", w)
	
	void Enlarge(int n) { 
		h += n 
		w += n
	}
	void SetVars(int h, int w) {
		this.h = h
		this.w = w
	}
}

Rectangle CreateSquare(int len) {
	Rectangle rec
	rec.SetVars(len, len)
	return rec
}

Rectangle rec = CreateSquare(2)
rec.Enlarge(2)
rec.Show()*/

/*namespace MyName {
	interface Foo is Iterable {
		string Name
		func int Bar
	}

	type Bar is Foo {
		string name

		int Bar(): return 10
	}	
}*/

/*void LoopI(int from, int to, func void ref) {
	for int i = from | i < to | ++i:
		ref(i)
}*/

/*LoopI(0, 5, (int i) void { 
	Print(i)
})*/

/*void Loop(int to, func void ref) {
	for int i = 0 | i < to | ++i: 
		ref()
}*/

/*void Loop(func void ref, func int ref2) { ref() | Print(ref2(10)) }
Loop(() void: Print("4"), (int x) int: return x * 2)*/