
namespace Prog {
	int Main() {
		LinkedList list
		list.Init()
		for int i ≡ 0 | i < 10 | i+=1:
			list.InsertAtBack(i)

		return list.GetValue(4)
		//return list.GetValue(2)
	}

	ListNode@ CreateNode(int data, ListNode@ next) {
		ListNode@ node ≡ new ListNode
		// node.Data ≡ data
		// node.Next ≡ next
		node.Init(data, next)
		return node
	}

	type ListNode {
		int data
		ListNode@ next
	
		/*int Data {
			get: return data
			set: data ≡ value
		}

		ListNode Next {
			get: return next
			set: next ≡ value
		}*/

		int GetData(): return this.data

		void Init(int data, ListNode@ next) { this.data ≡ data | this.next ≡ next }

		ListNode@ GetNext(int index) {
			if index = 0 or this.next = null:
				return this
			return this.next.GetNext(index - 1)
		}

		ListNode@ Insert(int index, int data) {
			if index = 0:
				return CreateNode(data, this)
			if next = null:
				return null	// List index out of bounds
			else: if this.next.next = null and index = 2:
				this.next.next ≡ CreateNode(data, null)
			else: this.next ≡ this.next.Insert(index - 1, data)
			return this
		}

		int Size() {
			if this.next = null: return 1
			return 1 + this.next.Size()
		}

		void InsertAtEnd(int data) {
			if this.next = null {
				//int n := CreateNode(data, null).data
				this.next ≡ CreateNode(data, null)
			}
				
			else: this.next.InsertAtEnd(data)
		}

		/*void Show() {
			PrintL(data)
			if next ≠ null {
				PrintL(", ")
				next.Show()
			}
		}*/

		void Remove(int index) {
			if next = null or index < 0:
				return // index out of bounds
			else: if index = 0 {
				ListNode@ temp ≡ this.next 
				this.next ≡ this.next.next
				delete temp
			}
			else: this.next.Remove(index - 1)
		}

		void DeleteChildren() {
			unless this.next = null:
				this.next.DeleteChildren()
			delete this.next
		}
	}

	type LinkedList {
		ListNode@ first

		void Init(): first ≡ null

		int GetValue(int index) {
			ListNode@ a := first.GetNext(index)
			return a.GetData()
			//return this.first.GetNext(index).GetData()
		}

		int Size() {
			if this.first = null:
				return 0
			return this.first.Size()
		}

		void Insert(int index, int data) {
			if this.first = null:
				this.first ≡ CreateNode(data, null)
			else: this.first ≡ this.first.Insert(index, data)
		}

		void InsertAtFront(int data): this.first ≡ CreateNode(data, this.first)

		void InsertAtBack(int data) {
			if first = null:
				first ≡ CreateNode(data, null)
			else: first.InsertAtEnd(data)		
		}

		void Remove(int index) {
			if index = 0 {
				ListNode@ temp ≡ this.first
				this.first ≡ this.first.GetNext(0)
				delete temp
			}
			else: this.first.Remove(index)
		}

		/*void Show() {
			PrintL("[")
			unless first = null:
				first.Show()
			Print("]")
		}*/

		void Clear() {
			this.first.DeleteChildren()
			delete first
		}
	}
}