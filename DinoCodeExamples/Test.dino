// namespace Prog {
// 	int putchar(int a): extern
// 	char Print(char c): return putchar(c as int) as char
// 	void Newline(): Print('\n')
 
// void PrintNum(int num) {
// 	int a ≡ 1
// 	while a ≤ num / 10: a *= 10
// 	while a > 0 {
// 		putchar(num % (a * 10) / a + 48)
// 		a /= 10
// 	}
// }

// 	(int, char[]) Foo(int a, char b) {
// 		char[] arr := new char[20]
// 		for int i := 0 | i < arr.Size | i+=1:
// 			arr[i] := b + i as char
// 		return a, arr
// 	}
// 	// (int, char) Foo(): return 1, '0'

// 	int Main() {
// 		int a, var c := Foo(1, 'b')
// 		// int a, char[] c := Foo(1, 'a')
// 		for int i := 0 | i < c.Size | i+=1 {
// 			Print(c[i]) | Newline()
// 		}
// 		// int a, char c := Foo()
// 		return 10
// 		// int a := 10
// 	}
// }

// include "DinoCodeExamples/IncludeTest.dino"
// include "lib.dinoh"

// namespace Prog {
// 	void Main() {
// 		Foo.PrintNum(1234)
// 	}
// }

namespace Prog {
	char Print(char c): extern "putchar"

	void PrintNum(int num) {
		int a ≡ 1
		while a ≤ num / 10: a *= 10
		while a > 0 {
			Print((num % (a * 10) / a + 48) as char)
			a /= 10
		}
		Print('\n')
	}

	interface Foo1 { void Show() | void Set(char c) }

	interface Foo2: void Show2()

	type Bar1 is Foo1, Foo2 {
		char c
		void Set(char c): this.c := c
		void Show() { Print('B') |  Print('1') | Print(':') | Print(' ') | Print(c) | Print('\n') }
		void Show2() { Print('B') |  Print('1')}
	}

	type Bar2 is Foo1, Foo2 {
		char c
		void Set(char c): this.c := c
		void Show() { Print('B') |  Print('2') | Print(':') | Print(' ') | Print(c) | Print('\n') }
		void Show2() { Print('B') |  Print('2')}
	}

	type Bar3 is Foo1, Foo2 {
		char c
		void Set(char c): this.c := c
		void Show() { Print('B') |  Print('3') | Print(':') | Print(' ') | Print(c) | Print('\n') }
		void Show2() { Print('B') |  Print('3') }
	}

	void Main() {
		Foo1[] arr := new Foo1[3]
		arr[0] := (new Bar1) as Foo1
		arr[1] := (new Bar2) as Foo1
		arr[2] := (new Bar3) as Foo1

		for int i := 0 | i < arr.Size | i+=1 {
			arr[i].Set('0' + i as char)
		}

		for int i := 0 | i < arr.Size | i+=1 {
			arr[i].Show()
		}
	}
}