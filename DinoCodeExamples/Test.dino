// namespace Prog {
// 	int putchar(int a): extern
// 	char Print(char c): return putchar(c as int) as char
// 	void Newline(): Print('\n')
 
// 	// void PrintNum(int num) {
//     //     int a ≡ 1
//     //     while a ≤ num / 10: a *= 10
//     //     while a > 0 {
//     //         putchar(num % (a * 10) / a + 48)
//     //         a /= 10
//     //     }
//     // }

// 	(int, char[]) Foo(int a, char b) {
// 		char[] arr := new char[20]
// 		for int i := 0 | i < arr.Size | i+=1:
// 			arr[i] := b + i as char
// 		return a, arr
// 	}
// 	// (int, char) Foo(): return 1, '0'

// 	int Main() {
// 		int a, var c := Foo(1, 'b')
// 		// int a, char[] c := Foo(1, 'a')
// 		for int i := 0 | i < c.Size | i+=1 {
// 			Print(c[i]) | Newline()
// 		}
// 		// int a, char c := Foo()
// 		return 10
// 		// int a := 10
// 	}
// }

// include "DinoCodeExamples/IncludeTest.dino"
// include "lib.dinoh"

// namespace Prog {
// 	void Main() {
// 		Foo.PrintNum(1234)
// 	}
// }

namespace Prog {

	// interface Shape {
	// 	int Area()
	// }
	

	// type Square is Shape {
	// 	int h
	// 	// int Len {
	// 	// 	get: return h
	// 	// 	set: h := value
	// 	// }
	// 	int Area(): return h*h
	// }

	// type iVtable {
	// 	int Id
	// }

	// type vtable {
	// 	int Count
	// 	iVtable@[3] Tables
	// }

	// iVtable@ getInterfaceVtable(vtable@ table, int id) {
	// 	for int i := 0 | i < table.Count | i+=1:
	// 		if table.Tables[i].Id = id:
	// 			return table.Tables[i]
	// 	return null
	// }

	int Sum(int a, int b): return a + b

	int Main() {
		// Shape s := (new Square) as Shape
		int(int, int) sumptr := Sum
		int a := sumptr(1, 3)
		// int a := Sum(1,5)
		return a//sumptr(1, 4)
	}
}