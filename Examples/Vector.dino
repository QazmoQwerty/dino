// import "std"
import "Examples/std"

namespace NS {
    type Vector {
        any[] data
        int count

        void Init() {
            data := null
            count := 0
        }

        int Size: get {
            return count
        }

        void Add(any e) {
            // if data = null:
            //     data := new int[10]
            if data.Size = 0:
                data := new any[10]
            
            // condition to increase data - last slot exhausted
            if data.Size = count {
                // Line causes crash:
                // var temp := new int[count*2] FIXME
                any[] temp := new any[count*2]
                for int i := 0 | i < count | i++:
                    temp[i] := data[i]
                delete data
                data := temp
            }

            data[count] := e
            count++
        }

        void Set(int idx, any e) {
            if idx >= count {
                // TODO - throw
                Std.PrintS("vector out of range")
                return
            }
            data[idx] := e
        }

        any Get(int idx) {
            if idx >= count {
                // TODO - throw
                Std.PrintS("vector out of range")
                // FIXME: "return" with no number is accepted by the decorator??
                // EG:
                # return
                any ret := null
                return ret  // FIXME: make "return null" work
            }
            return data[idx]
        }

        void Clear() {
            delete data
            count := 0
        }   
    }

    int@ NewInt(int n) {
        var a := new int
        @a := n
        return a
    }

    string@ NewString(string s) {
        var ret := new string
        @ret := s
        return ret
    }

    void Print(any a) {
        if a is int:
            Std.PrintD(@(a as int))
        else if a is bool:
            Std.PrintS("true" if @(a as bool) else "false")
        else if a is string:
            Std.PrintS(@(a as string))
        else if a = null:
            Std.PrintS("null")
        else: Std.PrintS("Unprintable type")
    }

    void Main() {
        Vector v
        v.Init()
        for int i := 0 | i < 10 | i++ {
            v.Add(NewInt(i))
        }

        v.Add(NewString("wow"))
        v.Add(NewString("it"))
        v.Add(NewString("works!"))
        
        for int i := 0 | i < v.Size | i++:
            Print(v.Get(i))
    }
}