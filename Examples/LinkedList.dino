
namespace LL {
	ListNode@ CreateNode(int data, ListNode@ next) {
		ListNode@ node ≡ new ListNode
		node.Init(data, next)
		return node
	}

	type ListNode {
		int data
		ListNode@ next
	
		int Data {
			get return data
			set data ≡ value
		}

		ListNode@ Next {
			get return next
			set next ≡ value
		}

		void Init(int data, ListNode@ next) { this.data ≡ data | this.next ≡ next }

		ListNode@ GetNext(int index) {
			if index = 0 or next = null
				return this
			return next.GetNext(index - 1)
		}

		ListNode@ Insert(int index, int data) {
			if index = 0
				return CreateNode(data, this)
			if next = null
				return null	// List index out of bounds
			else if next.next = null and index = 2
				next.next ≡ CreateNode(data, null)
			else next ≡ next.Insert(index - 1, data)
			return this
		}

		int Size get 
			return if next = null then 1 else 1 + next.Size

		void InsertAtEnd(int data) {
			if next = null
				next ≡ CreateNode(data, null)
			else next.InsertAtEnd(data)
		}

		void Show() {
			Std.PrintD(data)
			if next ≠ null
				next.Show()
		}

		void Remove(int index) {
			if next = null or index < 1
				return // index out of bounds
			else if index = 1
				next ≡ next.next
			else next.Remove(index - 1)
		}
	}

	type LinkedList {
		ListNode@ first

		void Init() first ≡ null

		int GetValue(int index)
			return first.GetNext(index).Data

		int Size get {
			if first = null
				return 0
			return first.Size
		}

		void Insert(int index, int data)
			first ≡ if first != null
					then first.Insert(index, data)
					else CreateNode(data, null)

		void InsertAtFront(int data)
			first ≡ CreateNode(data, first)

		void InsertAtBack(int data)
			if first = null
				first ≡ CreateNode(data, null)
			else first.InsertAtEnd(data)

		void Remove(int index)
			if index = 0
				first ≡ first.Next
			else first.Remove(index)

		void Show() 
			first.Show() unless first = null
	}
}