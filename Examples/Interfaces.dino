import "std2"

namespace Prog {

	void Print(char c): extern "putchar"

	interface Foo1 { void Show() | void Set(char c) }

	interface Foo2: void Show2()

	type Bar1 is Foo1, Foo2 {
		char c
		void Set(char c): this.c := c
		void Show() { Print('B') | Print('1') | Print(':') | Print(' ') | Print(c) | Print('\n') }
		void Show2() { Print('B') | Print('1') | Print('\n') }
	}

	type Bar2 is Foo1, Foo2 {
		char c
		void Set(char c): this.c := c
		void Show() { Print('B') | Print('2') | Print(':') | Print(' ') | Print(c) | Print('\n') }
		void Show2() { Print('B') | Print('2') | Print('\n') }
	}

	type Bar3 is Foo1, Foo2 {
		char c
		void Set(char c): this.c := c
		void Show() { Print('B') | Print('3') | Print(':') | Print(' ') | Print(c) | Print('\n') }
		void Show2() { Print('B') | Print('3') | Print('\n') }
	}

	void Main() {
		Foo1[] arr := new Foo1[3]
		arr[0] := new Bar1
		arr[1] := new Bar2
		arr[2] := new Bar3

		for int i := 0 | i < arr.Size | i+=1 {
			arr[i].Set('0' + i as char)
		}

		for int i := 0 | i < arr.Size | i+=1 {
			if arr[i] is Bar2:
				(arr[i] as Bar2).Show2()

			arr[i].Show()
		}
	}
}