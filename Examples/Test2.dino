import "DinoStd/std"

namespace NS {
    
    // type Foo {
    //     int n
    //     int N {
    //         get: return n
    //         set: n ≡ value
    //     }
    // }

    // type Foo {
    //     int[10] A
    //     int Size: get: return A.Size
    // }

    (int[10], int[10]) Bar() {
        // int[10] a := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        // int[10] b := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        // return a, b

        return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    }

    void Main() {
        Std.PrintS("got here1")
        var a, var b := Bar()
        Std.PrintS("got here2")
        for int i := 0 | i < a.Size | i++:
            Std.PrintD(a[i])
        for int i := 0 | i < b.Size | i++:
            Std.PrintD(b[i])
        // var f1 ≡ new Foo
        // f1.N ≡ 10
        // any n ≡ f1
        // if n is Foo {
        //     var f2 ≡ n as Foo
        //     Std.PrintD(f2.N)
        //     f2.N ≡ 20
        //     Std.PrintD(f2.N)
        // }
    }
}