import "std"

namespace Ideas {
    void Main() {
        var a ≡ 10
        a :≡ 10 

        if b: break
        break if b

        unless b: break
        break unless b

        if b: continue
        continue if b

        unless b: continue
        continue unless b

        // Postfix if/unless
        a ≡ 1 if b
        a ≡ 1 if b else a ≡ 2
        a ≡ 1 unless b
        a ≡ 2 unless b then a ≡ 1

        // Need to make room by changing conditional expressions
        a ≡ 1 if b else 2       // old
        a ≡ if b then 1 else 2  // new?
        a ≡ b ? 1 : 2           // C++


        // Switch without the 'case' operator:
        switch val {
            'a': return 1
            'b': return 2
            'c': return 3
            default: return 0
        }
        // Instead of:
        switch val {
            case 'a': return 1
            case 'b': return 2
            case 'c': return 3
            default:  return 0
        }

        // type switch:
        switch v :≡ val.type {
            int:     Std.PrintD(v)
            bool:    Std.PrintB(v)
            Foo:     v.Show()
            default: Std.PrintS("unknown type")
        }

        // with 'case', withot 'v :≡ ...'
        switch val.type {
            case int:   return "int"
            case bool:  return "bool"
            case Foo:   return "Foo"
            default:    return "unknown"
        }


        // Linebreak-negator '...'

        a ≡ 1 +
            10 +
            13 +
            14

        a ≡   1..
            + 10..
            + 13..
            + 14

        a ≡   1...
            + 10...
            + 13...
            + 14

        a ≡   1…
            + 10…
            + 13…
            + 14

        a += b
        ...if 12 = 13


        if leftType is DST.PointerType and (leftType as DST.PointerType@).PtrType is DST.BasicType

        if left.Type is PointerType...
        and (left.Type as PointerType).PtrType is BasicType

        if left.Type is PointerType
        ...and (left.Type as PointerType).PtrType is BasicType

        if left.Type is PointerType and 
          (left.Type as PointerType).PtrType is BasicType
    }

    void Print(any obj) {
        switch t as obj.type {
            case int: Std.PrintD(t)
            case string: Std.PrintS(t)
        }

        switch t :≡ obj.type {
            int:    Std.PrintD(t)
            string: Std.PrintS(t)
        }
    }

    void Foo(int… a) {
        // Do stuff with vararg
    }

    void Foo(int... a) {
        // Do stuff with vararg
    }

    void Foo(int.. a) {
        // Do stuff with vararg
    }

    enum Days {
        Sunday      1
        Monday      13
        Tuesday     14
        Wednesday
        Thursday
        Friday
        Saturday
    }


    type Bar {
        int a
        int b

        init {  
            // Default constructor
        }

        init (int a, int b) {
            // constructor with two parameters
        }

        Bar(int a, int b) { this.a ≡ a | this.b ≡ b }
    } 

    (Bar, Bar) Ex1(int a, int b) {
        return Bar{a, b}, Bar{}
    }

    (Bar, Bar) Ex1(int a, int b) {
        return Bar(a, b), Bar()
    }

    void Ex2() {
        Std.Map[string, int] myMap {
            ("aaa", 1),
            ("bbb", 2),
            ("aaa", 3),
            ("bbb", 4),
        }

        Std.Map[string, int] myMap (
            ("aaa", 1),
            ("bbb", 2),
            ("aaa", 3),
            ("bbb", 4)
        ..)
    }
}